
pub struct AES {
    key: Vec<u8>,
    nk: u8,        // key length 4, 6 or 8
    nr: u8,         // number of rounds 10, 12 or 14 depending on nk respectively
}

impl AES {
    pub fn new(key: &[u8]) -> Result<Self, &'static str> {
        let lens = [
            [16u8, 24, 32],
            [4 , 6 , 8 ],
            [10, 12, 14]
        ];
        if let Ok(x) = lens[0].binary_search(&(key.len() as u8)) {
            Ok(Self {
                key: key.to_vec(),
                nk: lens[1][x],
                nr:lens[2][x],
            })
        } else {
            Err("non standard key length")
        }
    }

    pub fn encrypt_block(&self, inp: [u8; 16]) -> [u8; 16] {
        let mut state = inp;
        let expansion = self.key_expansion();

        add_round_key(&mut state, &expansion[0..4]);

        for round in 1..self.nr {
            sub_bytes(&mut state);
            shift_rows(&mut state);
            mix_columns(&mut state);
            add_round_key(&mut state, &expansion[(round as usize*4)..((round as usize+1)*4)]);
        }

        sub_bytes(&mut state);
        shift_rows(&mut state);
        add_round_key(&mut state, &expansion[(self.nr as usize*4)..((self.nr as usize+1)*4)]);

        state
    }

    pub fn decrypt_block(&self, cipher: [u8; 16]) -> [u8; 16] {
        let mut state = cipher;
        let mut expansion = self.key_expansion();

        for i in 1..self.nr as usize {
            let mut s = [0; 16];
            for j in 0..16 {
                s[j] = expansion[i*4+j/4][j%4];
            }
            inv_mix_columns(&mut s);
            for j in 0..16 {
                expansion[i*4+j/4][j%4] = s[j];
            }
        }

        add_round_key(&mut state, &expansion[(self.nr as usize*4)..(self.nr as usize+1)*4]);
        
        for round in (1..self.nr).rev() {
            inv_sub_bytes(&mut state);
            inv_shift_rows(&mut state);
            inv_mix_columns(&mut state);
            add_round_key(&mut state, &expansion[round as usize*4..(round as usize+1)*4]);
        }

        inv_sub_bytes(&mut state);
        inv_shift_rows(&mut state);
        add_round_key(&mut state, &expansion[0..4]);

        state
    }

    pub fn key_expansion(&self) -> Vec<[u8; 4]> {
        let mut temp;

        let mut res = vec!();
        for i in 0..self.nk {
            res.push([self.key[4*i as usize], self.key[4*i as usize+1], self.key[4*i as usize+2], self.key[4*i as usize+3]]);
        }

        for i in self.nk..4*(self.nr+1) {
            temp = res[i as usize-1];
            if i % self.nk == 0 {
                rot_word(&mut temp);
                sub_bytes(&mut temp);
                
                temp = byte_poly_sum(temp, rcon(i/self.nk));
                
            } else if self.nk > 6 && i % self.nk == 4 {
                sub_bytes(&mut temp);
            }
            res.push(byte_poly_sum(res[(i - self.nk) as usize], temp)); 
        }

        res
    }
    
}

fn rcon(i: u8) -> [u8; 4] {
    let mut x = 1;
    for _ in 0..(i-1) {
        x = xtime(x);
    }
    [x, 0, 0, 0]
}

fn rot_word(inp: &mut [u8; 4]) {
    *inp = modular_product([0,0,0,1], *inp);
}

fn sub_bytes(inp: &mut [u8]) {
    let s_box = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca ,0x82 ,0xc9 ,0x7d ,0xfa ,0x59 ,0x47 ,0xf0 ,0xad ,0xd4 ,0xa2 ,0xaf ,0x9c ,0xa4 ,0x72 ,0xc0],
        [0xb7 ,0xfd ,0x93 ,0x26 ,0x36 ,0x3f ,0xf7 ,0xcc ,0x34 ,0xa5 ,0xe5 ,0xf1 ,0x71, 0xd8 ,0x31 ,0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],
    ];

    for i in inp {
        *i = s_box[*i as usize >> 4][*i as usize & 0xf];
    }
}

fn inv_sub_bytes(inp: &mut [u8]) {
    let inv_s_box = [
       [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb]
       , [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb]
       , [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e]
       , [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25]
       , [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92]
       , [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84]
       , [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06]
       , [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b]
       , [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73]
       , [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e]
       , [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b]
       , [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4]
       , [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f]
       , [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef]
       , [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61]
       , [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
    ];

    for i in inp {
        *i = inv_s_box[*i as usize >> 4][*i as usize & 0xf];
    }
}

fn shift_rows(inp: &mut [u8; 16]) {
    let rows = inp.to_vec();
    for i in 1..4 {
        for j in 0..4 {
            inp[i+j*4] = rows[(i+(i+j)*4)%16];
        }
    }
}

fn inv_shift_rows(inp: &mut [u8; 16]) {
    let rows = inp.to_vec();
    for i in 1 as i8..4 {
        for j in 0 as i8..4 {
            let mut id = (i+(j-i)*4)%16;
            if id < 0 {
                id += 16;
            }
            inp[i as usize+j as usize*4] = rows[id as usize];
        }
    }
}

fn mix_column(inp: &mut [u8]) {
    let s = inp.to_vec();
    inp[0] = bit_poly_mul(2, s[0]) ^ bit_poly_mul(3, s[1]) ^ s[2] ^ s[3];
    inp[1] = s[0] ^ bit_poly_mul(2, s[1]) ^ bit_poly_mul(3, s[2]) ^ s[3];
    inp[2] = s[0] ^ s[1] ^ bit_poly_mul(2, s[2]) ^ bit_poly_mul(3, s[3]);
    inp[3] = bit_poly_mul(3, s[0]) ^ s[2] ^ s[1] ^ bit_poly_mul(2, s[3]);
}

fn inv_mix_column(inp: &mut [u8]) {
    let s = inp.to_vec();
    inp[0] = bit_poly_mul(0xe, s[0]) ^ bit_poly_mul(0xb, s[1]) ^ bit_poly_mul(0xd, s[2]) ^ bit_poly_mul(9, s[3]);
    inp[1] = bit_poly_mul(9, s[0]) ^ bit_poly_mul(0xe, s[1]) ^ bit_poly_mul(0xb, s[2]) ^ bit_poly_mul(0xd, s[3]);
    inp[2] = bit_poly_mul(0xd, s[0]) ^ bit_poly_mul(9, s[1]) ^ bit_poly_mul(0xe, s[2]) ^ bit_poly_mul(0xb, s[3]);
    inp[3] = bit_poly_mul(0xb, s[0]) ^ bit_poly_mul(0xd, s[1]) ^ bit_poly_mul(9, s[2]) ^ bit_poly_mul(0xe, s[3]);
}

fn mix_columns(inp: &mut [u8; 16]) {
    for i in inp.chunks_mut(4) {
        mix_column(i);
    }
}

fn inv_mix_columns(inp: &mut [u8; 16]) {
    for i in inp.chunks_mut(4) {
        inv_mix_column(i);
    }
}

fn add_round_key(inp: &mut [u8; 16], key: &[[u8; 4]]) {
    for (i, v) in inp.iter_mut().enumerate() {
        *v = *v ^ key[i / 4][i % 4];
    }
}

fn xtime(x: u8) -> u8 {
    if x & 0x80 != 0 {
        (x << 1) ^ 0x1b  // polynomial representation: (P * x) % x4 + x3 + x2 + 1
    } else {
        x << 1
    }
}

pub fn bit_poly_mul(byte: u8, byte2: u8) -> u8 {
    if byte2 == 0 {
        return 0;
    }
    let mut byte2 = byte2;
    let mut inter = byte;
    let mut res = vec![0];
    let mut n2 = 1;
    while byte2 != 0 {
        if byte2 & n2 != 0 {
            res.push(inter);
        }
        byte2 = byte2 & (n2 ^ 0xff); // to remove the ith bit
        n2 = n2 << 1;
        inter = xtime(inter);
    }
    res.iter().fold(0, |a, b| a ^ b)
}

pub fn byte_poly_sum(arr: [u8; 4], arr2: [u8; 4]) -> [u8; 4] {
    let mut res = [0; 4];
    for (i, val) in arr.iter().enumerate() {
        res[i] = *val ^ arr2[i];
    }
    res
}

fn modular_product(arr: [u8; 4], arr2: [u8; 4]) -> [u8; 4] {
    [
        bit_poly_mul(arr[0], arr2[0]) ^ bit_poly_mul(arr[3], arr2[1]) ^ bit_poly_mul(arr[2], arr2[2]) ^ bit_poly_mul(arr[1], arr2[3]),
        bit_poly_mul(arr[1], arr2[0]) ^ bit_poly_mul(arr[0], arr2[1]) ^ bit_poly_mul(arr[3], arr2[2]) ^ bit_poly_mul(arr[2], arr2[3]),
        bit_poly_mul(arr[2], arr2[0]) ^ bit_poly_mul(arr[1], arr2[1]) ^ bit_poly_mul(arr[0], arr2[2]) ^ bit_poly_mul(arr[3], arr2[3]),
        bit_poly_mul(arr[3], arr2[0]) ^ bit_poly_mul(arr[2], arr2[1]) ^ bit_poly_mul(arr[1], arr2[2]) ^ bit_poly_mul(arr[0], arr2[3]),
    ]
}

#[test]
fn correct_mul() {
    let oper = (0x57, 0x13);
    let result = 0xfe;

    assert_eq!(result, bit_poly_mul(oper.0, oper.1));
}

#[test]
fn correct_sub() {
    let mut state = [
        0x19, 0xa0, 0x9a, 0xe9,
        0x3d, 0xf4, 0xc6, 0xf8,
        0xe3, 0xe2, 0x8d, 0x48,
        0xbe, 0x2b, 0x2a, 0x08,
    ];
    let res = [
        0xd4, 0xe0, 0xb8, 0x1e,
        0x27, 0xbf, 0xb4, 0x41,
        0x11, 0x98, 0x5d, 0x52,
        0xae, 0xf1, 0xe5, 0x30,
    ];

    sub_bytes(&mut state);

    assert_eq!(res, state);
}

#[test]
fn correct_inv_sub() {
    let state = [
        0x19, 0xa0, 0x9a, 0xe9,
        0x3d, 0xf4, 0xc6, 0xf8,
        0xe3, 0xe2, 0x8d, 0x48,
        0xbe, 0x2b, 0x2a, 0x08,
    ];
    let mut res = [
        0xd4, 0xe0, 0xb8, 0x1e,
        0x27, 0xbf, 0xb4, 0x41,
        0x11, 0x98, 0x5d, 0x52,
        0xae, 0xf1, 0xe5, 0x30,
    ];

    inv_sub_bytes(&mut res);

    assert_eq!(res, state);
}

#[test]
fn correct_shift() {
    let mut block = [
        0xd4, 0x27, 0x11, 0xae,
        0xe0, 0xbf, 0x98, 0xf1,
        0xb8, 0xb4, 0x5d, 0xe5,
        0x1e, 0x41, 0x52, 0x30,
    ];
    let res = [
        0xd4, 0xbf, 0x5d, 0x30,
        0xe0, 0xb4, 0x52, 0xae,
        0xb8, 0x41, 0x11, 0xf1,
        0x1e, 0x27, 0x98, 0xe5,
    ];

    shift_rows(&mut block);
    assert_eq!(res, block);
}

#[test]
fn correct_inv_shift() {
    let block = [
        0xd4, 0x27, 0x11, 0xae,
        0xe0, 0xbf, 0x98, 0xf1,
        0xb8, 0xb4, 0x5d, 0xe5,
        0x1e, 0x41, 0x52, 0x30,
    ];
    let mut res = [
        0xd4, 0xbf, 0x5d, 0x30,
        0xe0, 0xb4, 0x52, 0xae,
        0xb8, 0x41, 0x11, 0xf1,
        0x1e, 0x27, 0x98, 0xe5,
    ];

    inv_shift_rows(&mut res);
    assert_eq!(res, block);
}

#[test]
fn correct_round() {
    let mut inp = [
        0x32, 0x88, 0x31, 0xe0,
        0x43, 0x5a, 0x31, 0x37,
        0xf6, 0x30, 0x98, 0x07,
        0xa8, 0x8d, 0xa2, 0x34
    ];
    let key = [
        [0x2b, 0x28, 0xab, 0x09],
        [0x7e, 0xae, 0xf7, 0xcf],
        [0x15, 0xd2, 0x15, 0x4f],
        [0x16, 0xa6, 0x88, 0x3c]
    ];

    let res = [
        0x19, 0xa0, 0x9a, 0xe9,
        0x3d, 0xf4, 0xc6, 0xf8,
        0xe3, 0xe2, 0x8d, 0x48,
        0xbe, 0x2b, 0x2a, 0x08,
    ];

    add_round_key(&mut inp, &key);

    assert_eq!(res, inp);
}

#[test]
fn correct_colmix() {
    let mut block = [
        0xd4, 0xbf, 0x5d, 0x30,
        0xe0, 0xb4, 0x52, 0xae,
        0xb8, 0x41, 0x11, 0xf1,
        0x1e, 0x27, 0x98, 0xe5,
    ];

    let res = [
        0x04, 0x66, 0x81, 0xe5,
        0xe0, 0xcb, 0x19, 0x9a,
        0x48, 0xf8, 0xd3, 0x7a,
        0x28, 0x06, 0x26, 0x4c
    ];

    mix_columns(&mut block);

    assert_eq!(res, block);
}

#[test]
fn correct_inv_colmax() {
    let block = [
        0xd4, 0xbf, 0x5d, 0x30,
        0xe0, 0xb4, 0x52, 0xae,
        0xb8, 0x41, 0x11, 0xf1,
        0x1e, 0x27, 0x98, 0xe5,
    ];

    let mut res = [
        0x04, 0x66, 0x81, 0xe5,
        0xe0, 0xcb, 0x19, 0x9a,
        0x48, 0xf8, 0xd3, 0x7a,
        0x28, 0x06, 0x26, 0x4c
    ];

    inv_mix_columns(&mut res);

    assert_eq!(res, block);
}

#[test]
fn key_expansion_128() {
    let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
    let res = vec![
        [0x2b, 0x7e, 0x15, 0x16], [0x28, 0xae, 0xd2, 0xa6], [0xab, 0xf7, 0x15, 0x88], [0x09, 0xcf, 0x4f, 0x3c],
        [0xa0, 0xfa, 0xfe, 0x17], [0x88, 0x54, 0x2c, 0xb1], [0x23, 0xa3, 0x39, 0x39], [0x2a, 0x6c, 0x76, 0x05],
        [0xf2, 0xc2, 0x95, 0xf2], [0x7a, 0x96, 0xb9, 0x43], [0x59, 0x35, 0x80, 0x7a], [0x73, 0x59, 0xf6, 0x7f],
        [0x3d, 0x80, 0x47, 0x7d], [0x47, 0x16, 0xfe, 0x3e], [0x1e, 0x23, 0x7e, 0x44], [0x6d, 0x7a, 0x88, 0x3b],
        [0xef, 0x44, 0xa5, 0x41], [0xa8, 0x52, 0x5b, 0x7f], [0xb6, 0x71, 0x25, 0x3b], [0xdb, 0x0b, 0xad, 0x00],
        [0xd4, 0xd1, 0xc6, 0xf8], [0x7c, 0x83, 0x9d, 0x87], [0xca, 0xf2, 0xb8, 0xbc], [0x11, 0xf9, 0x15, 0xbc],
        [0x6d, 0x88, 0xa3, 0x7a], [0x11, 0x0b, 0x3e, 0xfd], [0xdb, 0xf9, 0x86, 0x41], [0xca, 0x00, 0x93, 0xfd], 
        [0x4e, 0x54, 0xf7, 0x0e], [0x5f, 0x5f, 0xc9, 0xf3], [0x84, 0xa6, 0x4f, 0xb2], [0x4e, 0xa6, 0xdc, 0x4f],
        [0xea, 0xd2, 0x73, 0x21], [0xb5, 0x8d, 0xba, 0xd2], [0x31, 0x2b, 0xf5, 0x60], [0x7f, 0x8d, 0x29, 0x2f],
        [0xac, 0x77, 0x66, 0xf3], [0x19, 0xfa, 0xdc, 0x21], [0x28, 0xd1, 0x29, 0x41], [0x57, 0x5c, 0x00, 0x6e],
        [0xd0, 0x14, 0xf9, 0xa8], [0xc9, 0xee, 0x25, 0x89], [0xe1, 0x3f, 0x0c, 0xc8], [0xb6, 0x63, 0x0c, 0xa6]
    ];

    let aes = AES::new(&key).expect("okay");

    assert_eq!(res, aes.key_expansion());
}